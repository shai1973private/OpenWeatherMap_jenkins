input {
  rabbitmq {
    host => "rabbitmq"
    port => 5672
    user => "guest"
    password => "guest"
    queue => "vienna_weather"
    durable => true
    exchange => "weather_exchange"
    exchange_type => "topic"
    key => "vienna.weather.hourly"
    codec => "json"
    tags => ["weather", "vienna", "rabbitmq"]
  }
}

filter {
  # Parse the timestamp from the message with millisecond precision
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Add processing timestamp with millisecond precision
  ruby {
    code => "
      event.set('processed_at', Time.now.strftime('%Y-%m-%dT%H:%M:%S.%3N%z'))
      event.set('processing_delay_ms', ((Time.now.to_f - Time.parse(event.get('timestamp')).to_f) * 1000).round(3))
    "
  }
  
  # Extract weather data fields for easier querying
  if [weather_data] {
    # Temperature data
    if [weather_data][main] {
      mutate {
        add_field => {
          "temperature" => "%{[weather_data][main][temp]}"
          "feels_like" => "%{[weather_data][main][feels_like]}"
          "temp_min" => "%{[weather_data][main][temp_min]}"
          "temp_max" => "%{[weather_data][main][temp_max]}"
          "humidity" => "%{[weather_data][main][humidity]}"
          "pressure" => "%{[weather_data][main][pressure]}"
        }
      }
      
      # Convert to numbers
      mutate {
        convert => {
          "temperature" => "float"
          "feels_like" => "float"
          "temp_min" => "float"
          "temp_max" => "float"
          "humidity" => "integer"
          "pressure" => "integer"
        }
      }
    }
    
    # Weather condition
    if [weather_data][weather][0] {
      mutate {
        add_field => {
          "weather_condition" => "%{[weather_data][weather][0][main]}"
          "weather_description" => "%{[weather_data][weather][0][description]}"
          "weather_icon" => "%{[weather_data][weather][0][icon]}"
        }
      }
    }
    
    # Wind data
    if [weather_data][wind] {
      mutate {
        add_field => {
          "wind_speed" => "%{[weather_data][wind][speed]}"
        }
      }
      
      if [weather_data][wind][deg] {
        mutate {
          add_field => {
            "wind_direction" => "%{[weather_data][wind][deg]}"
          }
        }
        mutate {
          convert => {
            "wind_direction" => "integer"
          }
        }
      }
      
      mutate {
        convert => {
          "wind_speed" => "float"
        }
      }
    }
    
    # Cloud data
    if [weather_data][clouds] {
      mutate {
        add_field => {
          "cloudiness" => "%{[weather_data][clouds][all]}"
        }
      }
      mutate {
        convert => {
          "cloudiness" => "integer"
        }
      }
    }
    
    # Visibility data
    if [weather_data][visibility] {
      mutate {
        add_field => {
          "visibility_meters" => "%{[weather_data][visibility]}"
        }
      }
      mutate {
        convert => {
          "visibility_meters" => "integer"
        }
      }
      
      # Calculate visibility in kilometers
      ruby {
        code => "
          visibility_m = event.get('visibility_meters')
          if visibility_m
            event.set('visibility_km', (visibility_m.to_f / 1000).round(2))
          end
        "
      }
    }
    
    # Location data
    if [weather_data][coord] {
      mutate {
        add_field => {
          "latitude" => "%{[weather_data][coord][lat]}"
          "longitude" => "%{[weather_data][coord][lon]}"
        }
      }
      mutate {
        convert => {
          "latitude" => "float"
          "longitude" => "float"
        }
      }
      
      # Create geo_point for Kibana maps
      ruby {
        code => "
          lat = event.get('latitude')
          lon = event.get('longitude')
          if lat && lon
            event.set('location', { 'lat' => lat, 'lon' => lon })
          end
        "
      }
    }
  }
  
  # Add computed fields
  ruby {
    code => "
      # Calculate heat index if temperature and humidity are available
      temp = event.get('temperature')
      humidity = event.get('humidity')
      
      if temp && humidity && temp >= 26.7  # Heat index only relevant for temps >= 80Â°F (26.7Â°C)
        # Simplified heat index calculation
        hi = temp + (0.5 * (temp + 61.0 + ((temp - 68.0) * 1.2) + (humidity * 0.094)))
        event.set('heat_index', hi.round(2))
      end
      
      # Add hour of day for time-based analysis
      event.set('hour_of_day', Time.parse(event.get('timestamp')).hour)
    "
  }
  
  # Add metadata
  mutate {
    add_field => {
      "data_source" => "openweathermap"
      "location_name" => "Vienna, Austria"
      "measurement_type" => "current_weather"
    }
  }
  
  # Remove unnecessary fields to reduce storage
  mutate {
    remove_field => [ "headers", "rabbitmq_headers" ]
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "vienna-weather-%{+YYYY.MM.dd}"
  }
  
  # Debug output (optional - remove in production)
  stdout {
    codec => rubydebug {
      metadata => true
    }
  }
}